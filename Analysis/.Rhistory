var(coord_8)
plot(coord_8)
#16
a_16 = 0.8
b_16 = sqrt(15/4 - a^2)
b
coord_16 = data.frame(x=c(rep(-b,4),rep(-a,4),rep(a,4),rep(b,4)),
y=c(rep(c(-b,-a,a,b),a)))
#8
a_8 = 0.8
b_8 = sqrt(7/2 - a^2)
b_8
coord_8 = da_8ta_8.fra_8me(x=c(rep(-b_8,2),rep(-a_8,2),rep(a_8,2),rep(b_8,2)),
y=c(b_8,-b_8,-a_8,a_8,-a_8,a_8,-b_8,b_8))
coord_8 = data.frame(x=c(rep(-b_8,2),rep(-a_8,2),rep(a_8,2),rep(b_8,2)),
y=c(b_8,-b_8,-a_8,a_8,-a_8,a_8,-b_8,b_8))
var(coord_8)
plot(coord_8)
#16
a_16 = 0.8
b_16 = sqrt(15/4 - a^2)
b_16
coord_16 = data.frame(x=c(rep(-b_16_8,4),rep(-a_16,4),rep(a_16,4),rep(b_16_8,4)),
y=c(rep(c(-b_16_8,-a_16,a_16,b_16_8),a_16)))
#16
a_16 = 0.8
b_16 = sqrt(15/4 - a^2)
b_16
#16
a_16 = 0.8
b_16 = sqrt(15/4 - a_16^2)
b_16
coord_16 = data.frame(x=c(rep(-b_16_8,4),rep(-a_16,4),rep(a_16,4),rep(b_16_8,4)),
y=c(rep(c(-b_16_8,-a_16,a_16,b_16_8),a_16)))
coord_16 = data.frame(x=c(rep(-b_16_8,4),rep(-a_16,4),rep(a_16,4),rep(b_16_8,4)),
y=c(rep(c(-b_16_8,-a_16,a_16,b_16),4)))
coord_16 = data.frame(x=c(rep(-b_16_8,4),rep(-a_16,4),rep(a_16,4),rep(b_16,4)),
y=c(rep(c(-b_16_8,-a_16,a_16,b_16),4)))
coord_16 = data.frame(x=c(rep(-b_16,4),rep(-a_16,4),rep(a_16,4),rep(b_16,4)),
y=c(rep(c(-b_16_8,-a_16,a_16,b_16),4)))
coord_16 = data.frame(x=c(rep(-b_16,4),rep(-a_16,4),rep(a_16,4),rep(b_16,4)),
y=c(rep(c(-b_16,-a_16,a_16,b_16),4)))
var(coord_16)
plot(coord_16)
plot(coord_8)
#32
a_32 = 1.5
b_32 = sqrt(13/2 - a_32^2)
b_32
coord_32 = data.frame(x=c(rep(-b_32,4),rep(-a,4),rep(-1,4),rep(-0.5,4),rep(0.5,4),rep(1,4),rep(a_32,4),rep(b_32,4)),
y=c(-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32,
-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32))
var(coord_32)
plot(coord_32)
coord_32 = data.frame(x=c(rep(-b_32,4),rep(-a_32,4),rep(-1,4),rep(-0.5,4),rep(0.5,4),rep(1,4),rep(a_32,4),rep(b_32,4)),
y=c(-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32,
-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32))
var(coord_32)
plot(coord_32)
coord_32
coord_32$x %>% diff()
library(tidyverse
)
library(tidyverse)
coord_32$x %>% diff()
coord_32$x %>% diff() %>% max()
coord_32$x %>% diff() %>% min()
rnorm(1,0,1,empirical=TRUE)
coord_32
rnorm(32,0,0.25)
rnorm(32,0,0.1)
coord_32$x = coord_32$x+rnorm(32,0,0.1)
coord_32$x = coord_32$x+rnorm(32,0,0.1)
coord_32$y = coord_32$y+rnorm(32,0,0.1)
coord_32
coord_32 = data.frame(x=c(rep(-b_32,4),rep(-a_32,4),rep(-1,4),rep(-0.5,4),rep(0.5,4),rep(1,4),rep(a_32,4),rep(b_32,4)),
y=c(-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32,
-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32))
var(coord_32)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.1)
coord_32$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32)
coord_32 = data.frame(x=c(rep(-b_32,4),rep(-a_32,4),rep(-1,4),rep(-0.5,4),rep(0.5,4),rep(1,4),rep(a_32,4),rep(b_32,4)),
y=c(-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32,
-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32))
var(coord_32)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.1)
coord_32$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.1)
coord_32$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.2)
coord_32$y = coord_32$y+rnorm(32,0,0.2)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.2)
coord_32$y = coord_32$y+rnorm(32,0,0.2)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.2)
coord_32$y = coord_32$y+rnorm(32,0,0.2)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.2)
coord_32$y = coord_32$y+rnorm(32,0,0.2)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.1)
coord_32$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.1)
coord_32$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.1)
coord_32$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.05)
coord_32$y = coord_32$y+rnorm(32,0,0.05)
plot(coord_32)
coord_32 = data.frame(x=c(rep(-b_32,4),rep(-a_32,4),rep(-1,4),rep(-0.5,4),rep(0.5,4),rep(1,4),rep(a_32,4),rep(b_32,4)),
y=c(-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32,
-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32))
var(coord_32)
plot(coord_32)
coord_32$x = coord_32$x+rnorm(32,0,0.05)
coord_32$y = coord_32$y+rnorm(32,0,0.05)
plot(coord_32)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.05)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.05)
plot(coord_32_noise)
coord_32 = data.frame(x=c(rep(-b_32,4),rep(-a_32,4),rep(-1,4),rep(-0.5,4),rep(0.5,4),rep(1,4),rep(a_32,4),rep(b_32,4)),
y=c(-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32,
-b_32,-0.5,0.5,b_32,
-a_32,-1,1,a_32,
-a_32,-1,1,a_32,
-b_32,-0.5,0.5,b_32))
var(coord_32)
plot(coord_32)
coord_32_noise = coord_32
coord_32_noise$x = coord_32$x+rnorm(32,0,0.05)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.05)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.15)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.15)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.15)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.15)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.15)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.15)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_16 = data.frame(x=c(rep(-b_16,4),rep(-a_16,4),rep(a_16,4),rep(b_16,4)),
y=c(rep(c(-b_16,-a_16,a_16,b_16),4)))
var(coord_16)
plot(coord_16)
coord_16_noise = coord_16
coord_16_noise$x = coord_16$x+rnorm(16,0,0.1)
coord_16_noise$y = coord_16$y+rnorm(16,0,0.1)
plot(coord_16_noise)
coord_16_noise = coord_16
coord_16_noise$x = coord_16$x+rnorm(16,0,0.1)
coord_16_noise$y = coord_16$y+rnorm(16,0,0.1)
plot(coord_16_noise)
coord_16_noise = coord_16
coord_16_noise$x = coord_16$x+rnorm(16,0,0.1)
coord_16_noise$y = coord_16$y+rnorm(16,0,0.1)
plot(coord_16_noise)
coord_32_noise = coord_32
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise = coord_32
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_32_noise = coord_32
coord_32_noise$x = coord_32$x+rnorm(32,0,0.1)
coord_32_noise$y = coord_32$y+rnorm(32,0,0.1)
plot(coord_32_noise)
coord_8 = data.frame(x=c(rep(-b_8,2),rep(-a_8,2),rep(a_8,2),rep(b_8,2)),
y=c(b_8,-b_8,-a_8,a_8,-a_8,a_8,-b_8,b_8))
var(coord_8)
plot(coord_8)
coord_8_noise = coord_8
coord_8_noise$x = coord_8$x+rnorm(8,0,0.1)
coord_8_noise$y = coord_8$y+rnorm(8,0,0.1)
plot(coord_8_noise)
coord_8_noise = coord_8
coord_8_noise$x = coord_8$x+rnorm(8,0,0.1)
coord_8_noise$y = coord_8$y+rnorm(8,0,0.1)
plot(coord_8_noise)
coord_4_noise = coord_4
coord_4_noise$x = coord_4$x+rnorm(4,0,0.1)
coord_4_noise$y = coord_4$y+rnorm(4,0,0.1)
plot(coord_4_noise)
coord_2 = data.frame(x=rep(0,2),
y=c(-1,1))
var(coord_2)
plot(coord_2)
coord_2_noise = coord_2
coord_2_noise$x = coord_2$x+rnorm(2,0,0.1)
coord_2_noise$y = coord_2$y+rnorm(2,0,0.1)
plot(coord_2_noise)
coord_2_noise = coord_2
coord_2_noise$x = coord_2$x+rnorm(2,0,0.1)
coord_2_noise$y = coord_2$y+rnorm(2,0,0.1)
plot(coord_2_noise)
coord_2_noise = coord_2
coord_2_noise$x = coord_2$x+rnorm(2,0,0.1)
coord_2_noise$y = coord_2$y+rnorm(2,0,0.1)
plot(coord_2_noise)
coord_2_noise
coord_2_noise = coord_2
coord_2_noise$x = coord_2$x+rnorm(2,0,0.1)
coord_2_noise$y = coord_2$y+rnorm(2,0,0.1)
plot(coord_2_noise)
?rnorm
# sample_generator
# 2
sample_2 <- function(n){
sample_list = list()
coord_2 = data.frame(x=rep(0,2),
y=c(-1,1))
sample = coord_2
for(i in 1:n){
sample = sample %>% mutate(x=x+rnorm(1,0,0.1),
y=y+rnorm(1,0,0.1))
sample_list = c(sample_list,sample)
}
return(sample_list)
}
sample_2(50)
sample_list = c(sample_list,list(sample))
# sample_generator
# 2
sample_2 <- function(n){
sample_list = list()
coord_2 = data.frame(x=rep(0,2),
y=c(-1,1))
sample = coord_2
for(i in 1:n){
sample = sample %>% mutate(x=x+rnorm(1,0,0.1),
y=y+rnorm(1,0,0.1))
sample_list = c(sample_list,list(sample))
}
return(sample_list)
}
sample_2(50)
# sample_generator
# 2
sample_2 <- function(n){
sample_list = list()
coord_2 = data.frame(x=rep(0,2),
y=c(-1,1))
sample = coord_2
for(i in 1:n){
sample = sample %>% mutate(x=x+rnorm(2,0,0.1),
y=y+rnorm(2,0,0.1))
sample_list = c(sample_list,list(sample))
}
return(sample_list)
}
sample_2(50)
# 4
sample_4 <- function(n){
sample_list = list()
coord_4 = data.frame(x=c(-sqrt(1.5),-sqrt(1.5),sqrt(1.5),sqrt(1.5)),
y=c(-sqrt(1.5),sqrt(1.5) ,sqrt(1.5) ,-sqrt(1.5)))
sample = coord_4
for(i in 1:n){
sample = sample %>% mutate(x=x+rnorm(4,0,0.1),
y=y+rnorm(4,0,0.1))
sample_list = c(sample_list,list(sample))
}
return(sample_list)
}
sample_4(50)
mean(4, 6,2,0.5,2.5)
mean(c(4,6,2,0.5,2.5))
1+9+1+6.25+0.25
17.5/5
66 + 1.29 * 5
23/25
9/35
7-8.5
6-8.5
2.5/1.5
15*1.4+20*1.8+15*1.3
76.5/50
10/14
10/14
sqrt(10/14)
sample(25,25)
sample(25,25)
sample(25,25)
library(rjson)
library(tidyverse)
library(lsr)
library(sp)
setwd("/Users/young/Desktop/UCSD/Research/Mean_position_perception_lab/Cardinality_data")
#data transformation
all.data_size = list()
subject = 1
for(file.name in list.files(pattern = '*.json')) {
json_file = fromJSON(file = file.name)
json_file[['subject']] = subject
all.data_size[[subject]] = json_file
subject = subject + 1
}
setwd("/Users/young/Desktop/UCSD/Research/Mean_position_perception_lab/Analysis")
source("helper.R")
trial_response_size = tibble()
num_subj = length(all.data_size)
num_subj
for(i in 1:num_subj) {
for(j in 1:660) {
trial_response_size = bind_rows(trial_response_size,
tibble(subject = all.data_size[[i]]$subject,
trial_number = all.data_size[[i]]$trials[[j]]$trialNumber,
mean_index = all.data_size[[i]]$trials[[j]]$mean_index,
group_1_size = all.data_size[[i]]$trials[[j]]$group_1_size,
group_2_size = all.data_size[[i]]$trials[[j]]$group_2_size,
inner_width = all.data_size[[i]]$trials[[j]]$inner_width,
inner_height = all.data_size[[i]]$trials[[j]]$inner_height,
width_height = min(inner_width,inner_height)*0.98,
aspect_ratio = inner_width/inner_height,
# normalized coordinate
group_1_coord = list(coord_fcn(all.data_size[[i]]$trials[[j]]$group_1_coord,width_height)),
group_2_coord = list(coord_fcn(all.data_size[[i]]$trials[[j]]$group_2_coord,width_height)),
all_coordinates = list(coord_all_fcn(all.data_size[[i]]$trials[[j]]$all_coordinates,width_height)),
response_coordinate = list(c(all.data_size[[i]]$trials[[j]]$response_coord$x/width_height,
all.data_size[[i]]$trials[[j]]$response_coord$y/width_height)
),
mean_group_1 = list(c(all.data_size[[i]]$trials[[j]]$mean_group_1$x/width_height,
all.data_size[[i]]$trials[[j]]$mean_group_1$y/width_height)
),
mean_group_2 = list(c(all.data_size[[i]]$trials[[j]]$mean_group_2$x/width_height,
all.data_size[[i]]$trials[[j]]$mean_group_2$y/width_height)
),
mean_all = list(c(all.data_size[[i]]$trials[[j]]$mean_all$x/width_height,
all.data_size[[i]]$trials[[j]]$mean_all$y/width_height)
)
)
)
}
}
#Error analysis
tb.errors_size= trial_response_size %>%
rowwise() %>%
mutate(size_ratio = group_1_size/group_2_size,
mean_index = mean_index,
mean_all_recenter = list(c(mean_all[1]-0.5,mean_all[2]-0.5)),
all_coordinates_recenter = list(recenter(all_coordinates,mean_all)),
group_1_coord_recenter = list(recenter(group_1_coord,mean_all)),
group_2_coord_recenter = list(recenter(group_2_coord,mean_all)),
response_recenter = list(response_coordinate - mean_all),
convex_hull_coord = list(compute_ch(all_coordinates_recenter)),
mean_ch = list(colMeans(convex_hull_coord)),
covariance = list(cov(all_coordinates_recenter)),
eigenval = list(eigen(covariance)),
eigenvec = list(eigen(covariance)$vector),
group_1_mean_x= mean(group_1_coord_recenter$x),
group_1_mean_y= mean(group_1_coord_recenter$y),
group_2_mean_x= mean(group_2_coord_recenter$x),
group_2_mean_y= mean(group_2_coord_recenter$y),
proj.x_all = list(as.matrix(all_coordinates_recenter)%*%eigenvec[,1]),
proj.y_all = list(as.matrix(all_coordinates_recenter)%*%eigenvec[,2]),
proj.x_all_mean = mean(proj.x_all),
proj.y_all_mean = mean(proj.y_all),
proj.x_all_ch = list(as.matrix(convex_hull_coord)%*%eigenvec[,1]),
proj.y_all_ch = list(as.matrix(convex_hull_coord)%*%eigenvec[,2]),
proj.x_all_mean_ch = mean(proj.x_all_ch),
proj.y_all_mean_ch = mean(proj.y_all_ch),
proj.x_group_1 = list(as.matrix(group_1_coord_recenter)%*%eigenvec[,1]),
proj.y_group_1 = list(as.matrix(group_1_coord_recenter)%*%eigenvec[,2]),
proj.x_group_2 = list(as.matrix(group_2_coord_recenter)%*%eigenvec[,1]),
proj.y_group_2 = list(as.matrix(group_2_coord_recenter)%*%eigenvec[,2]),
proj.x_group_1_mean = mean(proj.x_group_1),
proj.y_group_1_mean = mean(proj.y_group_1),
proj.x_group_2_mean = mean(proj.x_group_2),
proj.y_group_2_mean = mean(proj.y_group_2),
proj.x_response = response_recenter%*%eigenvec[,1],
proj.y_response = response_recenter%*%eigenvec[,2],
min_x_proj = min(proj.x_all),
max_x_proj = max(proj.x_all),
min_y_proj = min(proj.y_all),
max_y_proj = max(proj.y_all),
# Check responses
# responses located within the boundary of objects (main_axis)?
wihtin_boundary_x = ifelse(proj.x_response>min_x_proj && proj.x_response<max_x_proj, "T", "F"),
# responses located between the group means?
between_means_x = ifelse(proj.x_response>min(proj.x_group_1_mean,proj.x_group_2_mean) &&
proj.x_response<max(proj.x_group_1_mean,proj.x_group_2_mean),
"T","F"),
# Absolute error
abs_error_to_all = abs_err_dist(response_recenter,c(0,0)),
abs_error_to_ch = abs_err_dist(response_recenter,mean_ch),
group_1_weight= compute_weight(proj.x_group_1_mean, proj.x_group_2_mean, proj.x_response)$weight_group_1,
true_group_1_weight = group_1_size/(group_1_size + group_2_size),
group_2_weight= compute_weight(proj.x_group_1_mean, proj.x_group_2_mean, proj.x_response)$weight_group_2,
true_group_2_weight = group_2_size/(group_1_size + group_2_size)
)
# Data cleaning and sanity checks (exclusion)
# Exclusion criterion
# within_boundary_x
tb.errors_size[tb.errors_size$wihtin_boundary_x=="F",]
# Attention check trials
tb.errors_size[tb.errors_size$wihtin_boundary_x=="F",][which(tb.errors_size[tb.errors_size$wihtin_boundary_x=="F",]$mean_index==(-1)),] %>%
pull(subject) %>%
unique()
#Check the out-of-boundary response trials
coord_out = tb.errors_size[tb.errors_size$wihtin_boundary_x=="F",] %>%
pull(all_coordinates)
# Add index column for each dataframes in a list
coord_out = coord_out %>% Map(cbind, ., trial_num = seq_along(.),type = "stimuli") %>% do.call(rbind,.)
coord_response_out = tb.errors_size[tb.errors_size$wihtin_boundary_x=="F",] %>% pull(response_coordinate) %>% do.call(rbind,.) %>%
as.data.frame() %>% mutate(trial_num = 1:nrow(.),type = "response")
colnames(coord_response_out)[1:2] = c("x", "y")
all_coord_out = rbind(coord_out, coord_response_out)
all_coord_out %>% ggplot(aes(x=x,y=y,color=type)) +geom_point() + facet_wrap(trial_num~.)
# Subject exclusion
# all.data_size[[37]]$client$survey_code
#Exclude practice and attention check trials
tb.errors_size_dat = tb.errors_size[-which(tb.errors_size$mean_index %in% (-(1:7))),]
#Errors grouped by size_ratio (within-subjects)
tb.errors_size_dat$abs_error_to_all %>% hist()
# Group_1 weight vs.Group_2 cardinality
# raw data
tb.errors_size_dat$group_2_size = as.factor(tb.errors_size_dat$group_2_size)
tb.errors_size_dat %>%
ggplot(aes(x=group_2_size, y = group_2_weight)) +
geom_boxplot()+
# geom_point(shape=16,size=3) +
geom_jitter(position=position_jitter(0.1),shape=16,size=2.5)+
geom_point(aes(x=group_2_size, y = true_group_2_weight), shape=17, size=3, color = "red")+
facet_wrap(group_1_size~subject)
# average
tb.errors_size_dat %>%
group_by(subject,group_1_size,group_2_size) %>%
summarise(n = n(), mean_group_2_weight = mean(group_2_weight),true_group_2_weight=mean(true_group_2_weight)) %>%
ggplot(aes(x=group_2_size, y = mean_group_2_weight)) +
geom_point(shape=16,size=3) +
geom_point(aes(x=group_2_size, y = true_group_2_weight),shape=17,size=3)+
facet_wrap(group_1_size~subject)
# Group_1 weight vs.Group_2 cardinality
# raw data
tb.errors_size_dat$group_2_size = as.factor(tb.errors_size_dat$group_2_size)
tb.errors_size_dat %>%
ggplot(aes(x=group_2_size, y = group_2_weight)) +
geom_boxplot()+
# geom_point(shape=16,size=3) +
geom_jitter(position=position_jitter(0.1),shape=16,size=2.5)+
geom_point(aes(x=group_2_size, y = true_group_2_weight), shape=17, size=3, color = "red")+
facet_wrap(group_1_size~subject)
# average
tb.errors_size_dat %>%
group_by(subject,group_1_size,group_2_size) %>%
summarise(n = n(), mean_group_2_weight = mean(group_2_weight),true_group_2_weight=mean(true_group_2_weight)) %>%
ggplot(aes(x=group_2_size, y = mean_group_2_weight)) +
geom_point(shape=16,size=3) +
geom_point(aes(x=group_2_size, y = true_group_2_weight),shape=17,size=3)+
facet_wrap(group_1_size~subject)
