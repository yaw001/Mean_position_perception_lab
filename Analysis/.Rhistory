tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_1_size > 1) %>% pull(consistent_side) %>% length()
tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_1_size > 1) %>% pull(consistent_side) %>% sum()
1449/2267
3458/4532
tb.errors_size_dat[tb.errors_size_dat$inner_group,]$group_2_size
tb.errors_size_dat[tb.errors_size_dat$inner_group,]$group_2_size %>% unique()
tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_2_size >= 8) %>% pull(consistent_side) %>% length()
tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_2_size >= 8) %>% pull(consistent_side) %>% sum()
tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_2_size >= 16) %>% pull(consistent_side) %>% length()
tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_2_size >= 16) %>% pull(consistent_side) %>% sum()
tb.errors_size %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),consistent = sum(consistent_side),proportion = consistent/n)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),consistent = sum(consistent_side),proportion = consistent/n)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),inner_group_num = sum(inner_group),consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) & (proj.x_all_mean < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) & (proj.x_all_mean > x_proj_inner_lower)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) & (proj.x_response < x_proj_inner_lower))|
((proj.x_group_2_mean > proj.x_group_1_mean) & (proj.x_response > x_proj_inner_lower)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),inner_group_num = sum(inner_group),consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_all_mean < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_all_mean > x_proj_inner_lower)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) & (proj.x_response < x_proj_inner_lower))|
((proj.x_group_2_mean > proj.x_group_1_mean) & (proj.x_response > x_proj_inner_lower)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),inner_group_num = sum(inner_group),consistent = sum(consistent_side),proportion = consistent/n)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),inner_group_response_num = sum(inner_group_response),consistent = sum(consistent_side),proportion = consistent/n)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group_response),
consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) & (proj.x_all_mean < x_proj_inner_lower))|
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_all_mean > x_proj_inner_lower)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) & (proj.x_response < x_proj_inner_lower))|
((proj.x_group_2_mean > proj.x_group_1_mean) & (proj.x_response > x_proj_inner_lower)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group_response),
consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_all_mean < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_all_mean > x_proj_inner_lower)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) & (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_lower)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group_response),
consistent = sum(consistent_side),proportion = consistent/n)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_all_mean < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_all_mean > x_proj_inner_lower)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) & (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_lower)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_all_mean < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_all_mean > x_proj_inner_upper)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) & (proj.x_all_mean < x_proj_inner_lower))|
((proj.x_group_2_mean > proj.x_group_1_mean) & (proj.x_all_mean > x_proj_inner_upper)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) & (proj.x_all_mean < x_proj_inner_lower))
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) & (proj.x_all_mean < x_proj_inner_lower)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) & (proj.x_all_mean < x_proj_inner_lower)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) & (proj.x_all_mean > x_proj_inner_lower)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_all_mean > x_proj_inner_lower)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = (proj.x_all_mean > x_proj_inner_lower),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
tb.errors_size_dat
tb.errors_size_dat$x_proj_inner_lower<tb.errors_size_dat$proj.x_all_mean
tb.errors_size_dat$proj.x_all
tb.errors_size_dat[999,]
tb.errors_size_dat[999,]$all_coordinates_recenter
tb.errors_size_dat[999,]$all_coordinates_recenter %>% plot()
tb.errors_size_dat[999,]$all_coordinates_recenter[[]] %>% plot()
tb.errors_size_dat[999,]$all_coordinates_recenter[[1]] %>% plot()
tb.errors_size_dat[999,]$proj.x_all[[1]] %>% plot()
tb.errors_size_dat[999,]$proj.x_all[[1]]
tb.errors_size_dat[999,]$proj.x_all[[1]]
data.frame(x=tb.errors_size_dat[999,]$proj.x_all[[1]],y=0) %>% ggplot(aes(x,y))+geom_point*
data.frame(x=tb.errors_size_dat[999,]$proj.x_all[[1]],y=0) %>% ggplot(aes(x,y))+geom_point()
tb.errors_size_dat[999,]$proj.x_all_mean[[1]]
tb.errors_size_dat[999,]$x_proj_inner_lower[[1]]
data.frame(x=tb.errors_size_dat[999,]$proj.x_all[[1]]+0.5,y=0) %>% ggplot(aes(x,y))+geom_point()
compute_inner_boundary <- function(proj_coord_1,proj_coord_2,mean_group_1,mean_group_2){
if(mean_group_1< mean_group_2){
proj_coord_lower = max(proj_coord_1)
proj_coord_upper = min(proj_coord_2)
} else{
proj_coord_lower = max(proj_coord_2)
proj_coord_upper = min(proj_coord_1)
}
return(inner_boundary = list(lower_inner_bound = proj_coord_lower,
upper_inner_bound = proj_coord_upper))
}
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = (proj.x_all_mean > x_proj_inner_lower),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
compute_inner_boundary <- function(proj_coord_1,proj_coord_2,mean_group_1,mean_group_2){
if(mean_group_1< mean_group_2){
proj_coord_lower = max(proj_coord_1)
proj_coord_upper = min(proj_coord_2)
} else{
proj_coord_lower = max(proj_coord_2)
proj_coord_upper = min(proj_coord_1)
}
return(inner_boundary = list(lower_inner_bound = proj_coord_lower,
upper_inner_bound = proj_coord_upper))
}
compute_edge_weight <- function(mean_group_1, mean_group_2, proj_coord, response){
proj_coord_lower = compute_inner_boundary(proj_coord)$lower_inner_bound
proj_coord_upper = compute_inner_boundary(proj_coord)$upper_inner_bound
if(mean_group_1 > mean_group_2){
weight_group_1 = (response - proj_coord_lower)/(proj_coord_upper-proj_coord_lower)
weight_group_2 = 1-weight_group_1
} else {
weight_group_1 = (proj_coord_upper - response)/(proj_coord_upper-proj_coord_lower)
weight_group_2 = 1-weight_group_1
}
return(weight = list(weight_group_1 = weight_group_1,
weight_group_2 = weight_group_2))
}
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_all)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_all)$upper_inner_bound,
inner_group = (proj.x_all_mean > x_proj_inner_lower),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat[999,]$x_proj_inner_lower[[1]]
data.frame(x=tb.errors_size_dat[999,]$proj.x_all[[1]]+0.5,y=0) %>% ggplot(aes(x,y))+geom_point()
data.frame(x=tb.errors_size_dat[999,]$proj.x_all[[1]],y=0) %>% ggplot(aes(x,y))+geom_point()
compute_inner_boundary <- function(proj_coord_1,proj_coord_2,mean_group_1,mean_group_2){
if(mean_group_1< mean_group_2){
proj_coord_lower = max(proj_coord_1)
proj_coord_upper = min(proj_coord_2)
} else{
proj_coord_lower = max(proj_coord_2)
proj_coord_upper = min(proj_coord_1)
}
return(inner_boundary = list(lower_inner_bound = proj_coord_lower,
upper_inner_bound = proj_coord_upper))
}
compute_edge_weight <- function(mean_group_1, mean_group_2, proj_coord_1, proj_coord_2, response){
proj_coord_lower = compute_inner_boundary(proj_coord)$lower_inner_bound
proj_coord_upper = compute_inner_boundary(proj_coord)$upper_inner_bound
if(mean_group_1 > mean_group_2){
weight_group_1 = (response - proj_coord_lower)/(proj_coord_upper-proj_coord_lower)
weight_group_2 = 1-weight_group_1
} else {
weight_group_1 = (proj_coord_upper - response)/(proj_coord_upper-proj_coord_lower)
weight_group_2 = 1-weight_group_1
}
return(weight = list(weight_group_1 = weight_group_1,
weight_group_2 = weight_group_2))
}
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj_coord_1,proj_coord_2,proj.x_group_1_mean,proj.x_group_2_mean)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj_coord_1,proj_coord_2,proj.x_group_1_mean,proj.x_group_2_mean)$upper_inner_bound,
inner_group = (proj.x_all_mean > x_proj_inner_lower),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_group_1,proj.x_group_2,proj.x_group_1_mean,proj.x_group_2_mean)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj_coord_1,proj_coord_2,proj.x_group_1_mean,proj.x_group_2_mean)$upper_inner_bound,
inner_group = (proj.x_all_mean > x_proj_inner_lower),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_group_1,proj.x_group_2,proj.x_group_1_mean,proj.x_group_2_mean)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_group_1,proj.x_group_2,proj.x_group_1_mean,proj.x_group_2_mean)$upper_inner_bound,
inner_group = (proj.x_all_mean > x_proj_inner_lower),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_group_1,proj.x_group_2,proj.x_group_1_mean,proj.x_group_2_mean)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_group_1,proj.x_group_2,proj.x_group_1_mean,proj.x_group_2_mean)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_mean_all < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_mean_all > x_proj_inner_upper)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
# Edge effect: Weighting of the two groups is not based on the group means but rather the boundary
tb.errors_size_dat = tb.errors_size_dat %>% mutate(
x_proj_inner_lower = compute_inner_boundary(proj.x_group_1,proj.x_group_2,proj.x_group_1_mean,proj.x_group_2_mean)$lower_inner_bound,
x_proj_inner_upper = compute_inner_boundary(proj.x_group_1,proj.x_group_2,proj.x_group_1_mean,proj.x_group_2_mean)$upper_inner_bound,
inner_group = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_all_mean < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_all_mean > x_proj_inner_upper)),
inner_group_response = ((proj.x_group_2_mean < proj.x_group_1_mean) && (proj.x_response < x_proj_inner_lower))||
((proj.x_group_2_mean > proj.x_group_1_mean) && (proj.x_response > x_proj_inner_upper)),
consistent_side = inner_group == inner_group_response
)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
tb.error_size_dat[tb.errors_size_dat$inner_group]
tb.error_size_dat[tb.errors_size_dat$inner_group,]
tb.errors_size_dat[tb.errors_size_dat$inner_group,]
tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_size_1 == 2, group_size_2 == 8)
tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_1_size == 2, group_2_size == 8)
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_1_size == 2, group_2_size == 8)
tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_1_size == 2, group_2_size == 8)[[1,]]
tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_1_size == 2, group_2_size == 8)[1,]
(tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_1_size == 2, group_2_size == 8))[1,]
(tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_1_size == 2, group_2_size == 8))[1,]
a = (tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_1_size == 2, group_2_size == 8))[1,]
a
a$all_coordinates_recenter %>% ggplot(aes(x,y)) + geom_point()
a$all_coordinates_recenter
a$all_coordinates_recenter %>% ggplot(aes(x,y)) + geom_point()
a$all_coordinates_recenter[[1]] %>% ggplot(aes(x,y)) + geom_point()
a$proj.x_all[[1]] %>% ggplot(aes(x,y)) + geom_point()
a$proj.x_all[[1]]
data.frame(x=a$proj.x_all[[1]],y=0) %>% ggplot(aes(x,y)) + geom_point()
a$proj.x_all_mean[[1]]
a$x_proj_inner_lower[[1]]
a$x_proj_inner_upper[[1]]
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
322/756
data.frame(x=a$proj.x_all[[1]],y=0) %>% ggplot(aes(x,y)) + geom_point()
a$x_proj_inner_lower
a$x_proj_inner_upper
(tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_1_size == 2, group_2_size == 8))
(tb.errors_size_dat[tb.errors_size_dat$inner_group,] %>% filter(group_1_size == 2, group_2_size == 8))$x_proj_inner_lower
tb.errors_size_dat %>% group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group_response_num = sum(inner_group_response),
inner_group_num = sum(inner_group),
consistent = sum(consistent_side),proportion = consistent/n)
24/205
205+24+542
205-24 + 542
tb.errors_size_dat %>% filter(consistent_side == F, inner_group == T, inner_group_response == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
consistent = sum(consistent_side),
percent = consistent/n)
tb.errors_size_dat
tb.errors_size_dat %>% filter(consistent_side == F, inner_group == T, inner_group_response == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
consistent = sum(consistent_side),
percent = consistent/n)
tb.errors_size_dat %>% filter(consistent_side == F, inner_group == T, inner_group_response == F)
tb.errors_size_dat %>% filter(consistent_side == F, inner_group == T, inner_group_response == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(n=n())
tb.errors_size_dat %>% filter(consistent_side == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(n=n())
tb.errors_size_dat %>% filter(consistent_side == F, inner_group == T, inner_group_response == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(n=n())
tb.errors_size_dat %>% filter(consistent_side == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(n=n())
tb.errors_size_dat %>% filter(consistent_side == F, inner_group == T, inner_group_response == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(n=n())
tb.errors_size_dat %>% filter(consistent_side == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
inner_group == T,
inner_group_response == F)
tb.errors_size_dat %>% filter(consistent_side == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
sum(inner_group == T & inner_group_response == F))
tb.errors_size_dat %>% filter(consistent_side == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(n=n(),
edge_effect = sum(inner_group == T & inner_group_response == F))
36*20
tb.errors_size_dat %>% filter(consistent_side == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(inconsistent=n(),
outside = sum(inner_group == T & inner_group_response == F))
tb.errors_size_dat %>% filter(consistent_side == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(inconsistent=n(),
outside = sum(inner_group == T & inner_group_response == F),
proportion = outside/inconsitent)
tb.errors_size_dat %>% filter(consistent_side == F) %>%
group_by(group_1_size,group_2_size) %>%
summarise(inconsistent=n(),
outside = sum(inner_group == T & inner_group_response == F),
proportion = outside/inconsistent)
tb.errors_size_dat %>% filter(consistent_side == F) %>%
group_by(subject,group_1_size,group_2_size) %>%
summarise(inconsistent=n(),
outside = sum(inner_group == T & inner_group_response == F),
proportion = outside/inconsistent)
edge_proportion = tb.errors_size_dat %>% filter(consistent_side == F) %>%
group_by(subject,group_1_size,group_2_size) %>%
summarise(inconsistent=n(),
outside = sum(inner_group == T & inner_group_response == F),
proportion = outside/inconsistent)
edge_proportion %>% hist(
)
edge_proportion %>% hist()
edge_proportion$proportion %>% hist()
edge_proportion = tb.errors_size_dat %>%
group_by(subject,group_1_size,group_2_size) %>%
summarise(total = n(),
inconsistent=sum(consistent_side==F),
outside = sum(inner_group == T & inner_group_response == F),
proportion = outside/inconsistent)
edge_proportion = tb.errors_size_dat %>%
group_by(group_1_size,group_2_size) %>%
summarise(total = n(),
inconsistent=sum(consistent_side==F),
outside = sum(inner_group == T & inner_group_response == F),
proportion = outside/inconsistent)
edge_proportion
edge_proportion$proportion %>% hist()
edge_proportion = tb.errors_size_dat %>% filter(size_ratio !=1) %>%
group_by(group_1_size,group_2_size) %>%
summarise(total = n(),
inconsistent=sum(consistent_side==F),
outside = sum(inner_group == T & inner_group_response == F),
proportion = outside/inconsistent)
edge_proportion
edge_proportion = tb.errors_size_dat %>% filter(size_ratio !=1) %>%
group_by(group_1_size,group_2_size) %>%
summarise(total = n(),
inconsistent=sum(consistent_side==F),
outside = sum(inner_group == T & inner_group_response == F),
proportion_inconsitent = inconsitent/total,
proportion_outside = outside/inconsistent)
edge_proportion = tb.errors_size_dat %>% filter(size_ratio !=1) %>%
group_by(group_1_size,group_2_size) %>%
summarise(total = n(),
inconsistent=sum(consistent_side==F),
outside = sum(inner_group == T & inner_group_response == F),
proportion_inconsitent = inconsistent/total,
proportion_outside = outside/inconsistent)
edge_proportion
