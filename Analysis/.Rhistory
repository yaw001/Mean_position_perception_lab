var(c(1,10))
var(c(1,12))
var(c(1,2,3,3,5,7,7,7,7,9,9,9,9,9,9))
mean(c(1,2,3,3,5,7,7,7,7,9,9,9,9,9,9))
library(stats)
skewness(c(1,2,3,3,5,7,7,7,7,9,9,9,9,9,9))
library(stats)
skewness(c(1,2,3,3,5,7,7,7,7,9,9,9,9,9,9))
stats4
library(moments)
install.packages("moments")
library(moments)
skewness(c(1,2,3,3,5,7,7,7,7,9,9,9,9,9,9))
mean(c(9,9,9,9,9,9,11,11,11,11,13,15,15,17,19))
mean(c(1,2,3,3,5,7,7,7,7,9,9,9,9,9,9))
var(c(9,9,9,9,9,9,11,11,11,11,13,15,15,17,19))
mean(c(9,9,9,9,9,9,11,11,11,11,13,15,15,17,19))
mean(c(9,9,9,9,9,9,11,11,11,11,13,15,15,17,19))
rbeta(20,2,8)
a=rbeta(20,2,8)
mean(a)
sd(a)
skewness(a)
a=rbeta(100,2,8)
mean(a)
sd(a)
skewness(a)
a=rbeta(100,2,8)
mean(a)
sd(a)
skewness(a)
a=rbeta(100,2,8)
mean(a)
sd(a)
skewness(a)
a=rbeta(100,8,2)
a=rbeta(100,2,8)
mean(a)
sd(a)
skewness(a)
b=rbeta(100,8,2)
mean(b)
sd(b)
skewness(b)
a=rbeta(100,2,8)
mean(a)
sd(a)
skewness(a)
b=rbeta(100,8,2)
mean(b)
sd(b)
skewness(b)
rnorm(1000,10,5)
rnorm(1000,10,5)^2
hist(rnorm(1000,10,5)^2)
hist(rnorm(1000,10,5)^2 + rnorm(1000,10,5)^2)
hist(rnorm(1000,10,5)^2 + rnorm(1000,10,5)^2 + rnorm(1000,10,5)^2)
hist(rnorm(1000,10,5)^2 + rnorm(1000,10,5)^2 + rnorm(1000,10,5)^2 + rnorm(1000,10,5)^2)
hist(rnorm(1000,10,5)^2)
hist(log(rnorm(1000,10,5)^2))
hist((log(rnorm(1000,10,5))^2))
hist((log(rnorm(1000,10,5))^2))
hist((log(rnorm(1000,10,5))^2))
runif(20)
var(runif(20))
a = runif(20)
var(a)
b = runif(20)
var(b)
b = runif(20)
var(b)
b = runif(20)
var(b)
b = runif(20)
var(b)
b = runif(20)
var(b)
plot(a)
plot(b)
IQR(a)
IQR(b)
quartile(a)
quantile(a)
quantile(b)
data.frame(x=a,y=rep(0.5,20)))
data.frame(x=a,y=rep(0.5,20))
plot(data.frame(x=a,y=rep(0.5,20)))
plot(data.frame(x=b,y=rep(0.5,20)))
quantile(a)
quantile(a)[4]
quantile(a)[4]+3*IQR(a)
a_1 = c(a,quantile(a)[4]+3*IQR(a))
b_1 = c(b,quantile(b)[4]+3*IQR(b))
plot(data.frame(x=a_1,y=rep(0.5,20)))
plot(data.frame(x=a_1,y=rep(0.5,21)))
plot(data.frame(x=a_1,y=rep(0.5,21)))
plot(data.frame(x=b_1,y=rep(0.5,21)))
a = runif(20)
var(a)
a_1 = c(a,quantile(a)[4]+3*IQR(a))
b = runif(20)
var(b)
a = runif(20)
var(a)
a_1 = c(a,quantile(a)[4]+3*IQR(a))
b = runif(20)
var(b)
b_1 = c(b,quantile(b)[4]+3*IQR(b))
plot(data.frame(x=a_1,y=rep(0.5,21)))
plot(data.frame(x=b_1,y=rep(0.5,21)))
plot(a)
plot(data.frame(x=a,y=rep(0.5,20)))
plot(data.frame(x=b,y=rep(0.5,20)))
plot(data.frame(x=a,y=rep(0.5,20)))
plot(data.frame(x=b,y=rep(0.5,20)))
plot(data.frame(x=a_1,y=rep(0.5,21)))
plot(data.frame(x=b_1,y=rep(0.5,21)))
plot(a)
plot(b)
IQR(a)
IQR(b)
quantile(a)[4]+3*IQR(a)
quantile(b)
mean(a)
mean(a_1)
mean(b)
mean(b_1)
mean(c(1,2,3,6))
rnorm(10, 5, 4)
rnorm(10, 5, 4)
rnorm(20, 5, 4)
rnorm(10, 5, 4)
library(tidyverse)
rbeta(1000,5,2)
a = rbeta(1000,5,2)
hist(a)
z_score = (a - mean(a))/sd(a)
hist(z_score)
library(rjson)
library(tidyverse)
library(lsr)
library(sp)
setwd("/Users/young/Desktop/UCSD/Research/Mean_position_perception_lab_data/Cardinality_data")
#data transformation
all.data_size = list()
subject = 1
for(file.name in list.files(pattern = '*.json')) {
json_file = fromJSON(file = file.name)
json_file[['subject']] = subject
all.data_size[[subject]] = json_file
subject = subject + 1
}
setwd("/Users/young/Desktop/UCSD/Research/Mean_position_perception_lab/Analysis")
source("helper.R")
trial_response_size = tibble()
num_subj = length(all.data_size)
num_subj
for(i in 1:num_subj) {
for(j in 1:660) {
trial_response_size = bind_rows(trial_response_size,
tibble(subject = all.data_size[[i]]$subject,
sid = all.data_size[[i]]$client$sid,
trial_number = all.data_size[[i]]$trials[[j]]$trialNumber,
mean_index = all.data_size[[i]]$trials[[j]]$mean_index,
group_1_size = all.data_size[[i]]$trials[[j]]$group_1_size,
group_2_size = all.data_size[[i]]$trials[[j]]$group_2_size,
inner_width = all.data_size[[i]]$trials[[j]]$inner_width,
inner_height = all.data_size[[i]]$trials[[j]]$inner_height,
width_height = min(inner_width,inner_height)*0.98,
aspect_ratio = inner_width/inner_height,
# normalized coordinate
group_1_coord = list(coord_fcn(all.data_size[[i]]$trials[[j]]$group_1_coord,width_height)),
group_2_coord = list(coord_fcn(all.data_size[[i]]$trials[[j]]$group_2_coord,width_height)),
all_coordinates = list(coord_all_fcn(all.data_size[[i]]$trials[[j]]$all_coordinates,width_height)),
response_coordinate = list(c(all.data_size[[i]]$trials[[j]]$response_coord$x/width_height,
all.data_size[[i]]$trials[[j]]$response_coord$y/width_height)
),
mean_group_1 = list(c(all.data_size[[i]]$trials[[j]]$mean_group_1$x/width_height,
all.data_size[[i]]$trials[[j]]$mean_group_1$y/width_height)
),
mean_group_2 = list(c(all.data_size[[i]]$trials[[j]]$mean_group_2$x/width_height,
all.data_size[[i]]$trials[[j]]$mean_group_2$y/width_height)
),
mean_all = list(c(all.data_size[[i]]$trials[[j]]$mean_all$x/width_height,
all.data_size[[i]]$trials[[j]]$mean_all$y/width_height)
)
)
)
}
}
num_subj
#data transformation
all.data_size = list()
subject = 1
for(file.name in list.files(pattern = '*.json')) {
json_file = fromJSON(file = file.name)
json_file[['subject']] = subject
all.data_size[[subject]] = json_file
subject = subject + 1
}
setwd("/Users/young/Desktop/UCSD/Research/Mean_position_perception_lab/Analysis")
source("helper.R")
trial_response_size = tibble()
num_subj = length(all.data_size)
num_subj
setwd("/Users/young/Desktop/UCSD/Research/Mean_position_perception_lab_data/Cardinality_data")
#data transformation
all.data_size = list()
setwd("/Users/young/Desktop/UCSD/Research/Mean_position_perception_lab_data/Cardinality_data")
#data transformation
all.data_size = list()
subject = 1
for(file.name in list.files(pattern = '*.json')) {
json_file = fromJSON(file = file.name)
json_file[['subject']] = subject
all.data_size[[subject]] = json_file
subject = subject + 1
}
setwd("/Users/young/Desktop/UCSD/Research/Mean_position_perception_lab/Analysis")
source("helper.R")
trial_response_size = tibble()
num_subj = length(all.data_size)
num_subj
for(i in 1:num_subj) {
for(j in 1:660) {
trial_response_size = bind_rows(trial_response_size,
tibble(subject = all.data_size[[i]]$subject,
sid = all.data_size[[i]]$client$sid,
trial_number = all.data_size[[i]]$trials[[j]]$trialNumber,
mean_index = all.data_size[[i]]$trials[[j]]$mean_index,
group_1_size = all.data_size[[i]]$trials[[j]]$group_1_size,
group_2_size = all.data_size[[i]]$trials[[j]]$group_2_size,
inner_width = all.data_size[[i]]$trials[[j]]$inner_width,
inner_height = all.data_size[[i]]$trials[[j]]$inner_height,
width_height = min(inner_width,inner_height)*0.98,
aspect_ratio = inner_width/inner_height,
# normalized coordinate
group_1_coord = list(coord_fcn(all.data_size[[i]]$trials[[j]]$group_1_coord,width_height)),
group_2_coord = list(coord_fcn(all.data_size[[i]]$trials[[j]]$group_2_coord,width_height)),
all_coordinates = list(coord_all_fcn(all.data_size[[i]]$trials[[j]]$all_coordinates,width_height)),
response_coordinate = list(c(all.data_size[[i]]$trials[[j]]$response_coord$x/width_height,
all.data_size[[i]]$trials[[j]]$response_coord$y/width_height)
),
mean_group_1 = list(c(all.data_size[[i]]$trials[[j]]$mean_group_1$x/width_height,
all.data_size[[i]]$trials[[j]]$mean_group_1$y/width_height)
),
mean_group_2 = list(c(all.data_size[[i]]$trials[[j]]$mean_group_2$x/width_height,
all.data_size[[i]]$trials[[j]]$mean_group_2$y/width_height)
),
mean_all = list(c(all.data_size[[i]]$trials[[j]]$mean_all$x/width_height,
all.data_size[[i]]$trials[[j]]$mean_all$y/width_height)
)
)
)
}
}
#Error analysis
tb.errors_size= trial_response_size %>%
rowwise() %>%
mutate(size_ratio = group_1_size/group_2_size,
mean_index = mean_index,
mean_all_recenter = list(c(mean_all[1]-0.5,mean_all[2]-0.5)),
all_coordinates_recenter = list(recenter(all_coordinates,mean_all)),
group_1_coord_recenter = list(recenter(group_1_coord,mean_all)),
group_2_coord_recenter = list(recenter(group_2_coord,mean_all)),
response_recenter = list(response_coordinate - mean_all),
convex_hull_coord = list(compute_ch(all_coordinates_recenter)),
mean_ch = list(colMeans(convex_hull_coord)),
covariance = list(cov(all_coordinates_recenter)),
eigenval = list(eigen(covariance)),
eigenvec = list(eigen(covariance)$vector),
group_1_mean_x= mean(group_1_coord_recenter$x),
group_1_mean_y= mean(group_1_coord_recenter$y),
group_2_mean_x= mean(group_2_coord_recenter$x),
group_2_mean_y= mean(group_2_coord_recenter$y),
proj.x_all = list(as.matrix(all_coordinates_recenter)%*%eigenvec[,1]),
proj.y_all = list(as.matrix(all_coordinates_recenter)%*%eigenvec[,2]),
proj.x_all_mean = mean(proj.x_all),
proj.y_all_mean = mean(proj.y_all),
proj.x_all_ch = list(as.matrix(convex_hull_coord)%*%eigenvec[,1]),
proj.y_all_ch = list(as.matrix(convex_hull_coord)%*%eigenvec[,2]),
proj.x_all_mean_ch = mean(proj.x_all_ch),
proj.y_all_mean_ch = mean(proj.y_all_ch),
proj.x_group_1 = list(as.matrix(group_1_coord_recenter)%*%eigenvec[,1]),
proj.y_group_1 = list(as.matrix(group_1_coord_recenter)%*%eigenvec[,2]),
proj.x_group_2 = list(as.matrix(group_2_coord_recenter)%*%eigenvec[,1]),
proj.y_group_2 = list(as.matrix(group_2_coord_recenter)%*%eigenvec[,2]),
proj.x_group_1_mean = mean(proj.x_group_1),
proj.y_group_1_mean = mean(proj.y_group_1),
proj.x_group_2_mean = mean(proj.x_group_2),
proj.y_group_2_mean = mean(proj.y_group_2),
proj.x_response = response_recenter%*%eigenvec[,1],
proj.y_response = response_recenter%*%eigenvec[,2],
min_x_proj = min(proj.x_all),
max_x_proj = max(proj.x_all),
min_y_proj = min(proj.y_all),
max_y_proj = max(proj.y_all),
# Check responses
# responses located within the boundary of objects (main_axis)?
wihtin_boundary_x = ifelse(proj.x_response>min_x_proj && proj.x_response<max_x_proj, "T", "F"),
# responses located between the group means?
between_means_x = ifelse(proj.x_response>min(proj.x_group_1_mean,proj.x_group_2_mean) &&
proj.x_response<max(proj.x_group_1_mean,proj.x_group_2_mean),
"T","F"),
# Absolute error
abs_error_to_all = abs_err_dist(response_recenter,c(0,0)),
abs_error_to_ch = abs_err_dist(response_recenter,mean_ch),
group_1_weight_raw = compute_weight(proj.x_group_1_mean, proj.x_group_2_mean, proj.x_response)$weight_group_1,
group_1_weight = ifelse(group_1_weight_raw<=0, 0.001, group_1_weight_raw),
true_group_1_weight = group_1_size/(group_1_size + group_2_size),
group_2_weight= 1-group_1_weight,
true_group_2_weight = group_2_size/(group_1_size + group_2_size)
)
# Data cleaning and sanity checks (exclusion)
# Exclusion criterion
# within_boundary_x
# Likely due to button misclick
tb.errors_size[tb.errors_size$wihtin_boundary_x=="F",] %>% print(n=100)
tb.errors_size = tb.errors_size[tb.errors_size$wihtin_boundary_x=="T",]
# Attention check trials
tb.errors_size[tb.errors_size$wihtin_boundary_x=="F",][which(tb.errors_size[tb.errors_size$wihtin_boundary_x=="F",]$mean_index==(-1)),] %>%
pull(subject) %>%
unique()
#Check the out-of-boundary response trials
coord_out = tb.errors_size[tb.errors_size$wihtin_boundary_x=="F",] %>%
pull(all_coordinates)
# Add index column for each dataframes in a list
coord_out = coord_out %>% Map(cbind, ., trial_num = seq_along(.),type = "stimuli") %>% do.call(rbind,.)
# average
# raw data (subject)
tb.errors_size_dat %>% filter(group_1_size == 2) %>%
group_by(subject,group_1_size,group_2_size) %>%
summarise(n = n(), mean_group_2_weight = mean(group_2_weight),median_group_2_weight = median(group_2_weight),true_group_2_weight=mean(true_group_2_weight)) %>%
ggplot(aes(x=group_2_size, y = mean_group_2_weight)) +
geom_point(shape=16,size=3,color="red") +
# geom_point(aes(x=group_2_size, y = median_group_2_weight),shape=16,color="blue",size=3)+
geom_point(aes(x=group_2_size, y = true_group_2_weight),shape=17,size=3,)+
facet_wrap(group_1_size~subject)
# within_boundary_x
# Likely due to button misclick
tb.errors_size[tb.errors_size$wihtin_boundary_x=="F",] %>% print(n=100)
tb.errors_size = tb.errors_size[tb.errors_size$wihtin_boundary_x=="T",]
#Exclude practice and attention check trials
tb.errors_size_dat = tb.errors_size[-which(tb.errors_size$mean_index %in% (-(1:7))),]
# weird trials
tb.errors_size_dat[tb.errors_size_dat$group_1_weight>=1,]
#Errors grouped by size_ratio (within-subjects)
tb.errors_size_dat$abs_error_to_all %>% hist()
# Group_1 weight vs.Group_2 cardinality
# raw data (subject)
tb.errors_size_dat$group_2_size = as.factor(tb.errors_size_dat$group_2_size)
tb.errors_size_dat %>% filter(subject==8) %>%
ggplot(aes(x=group_2_size, y = group_2_weight)) +
geom_boxplot()+
# geom_point(shape=16,size=3) +
geom_jitter(position=position_jitter(0.1),shape=16,size=2.5)+
geom_point(aes(x=group_2_size, y = true_group_2_weight), shape=17, size=3, color = "red")+
facet_wrap(group_1_size~subject)
all.data_size[[16]]$client$sid
# average
# raw data (subject)
tb.errors_size_dat %>% filter(group_1_size == 2) %>%
group_by(subject,group_1_size,group_2_size) %>%
summarise(n = n(), mean_group_2_weight = mean(group_2_weight),median_group_2_weight = median(group_2_weight),true_group_2_weight=mean(true_group_2_weight)) %>%
ggplot(aes(x=group_2_size, y = mean_group_2_weight)) +
geom_point(shape=16,size=3,color="red") +
# geom_point(aes(x=group_2_size, y = median_group_2_weight),shape=16,color="blue",size=3)+
geom_point(aes(x=group_2_size, y = true_group_2_weight),shape=17,size=3,)+
facet_wrap(group_1_size~subject)
#Log weight ratio vs. log size_ratio
tb.errors_size_dat=tb.errors_size_dat %>% rowwise() %>% mutate(log_weight_ratio = log(group_1_weight/group_2_weight,base=5),
true_log_weight_ratio = log(size_ratio,base=5))
# average
# raw data (subject)
tb.errors_size_dat %>% filter(group_1_size == 2) %>%
group_by(subject,group_1_size,group_2_size) %>%
summarise(n = n(), mean_group_2_weight = mean(group_2_weight),median_group_2_weight = median(group_2_weight),true_group_2_weight=mean(true_group_2_weight)) %>%
ggplot(aes(x=group_2_size, y = mean_group_2_weight)) +
geom_point(shape=16,size=3) +
# geom_point(aes(x=group_2_size, y = median_group_2_weight),shape=16,color="blue",size=3)+
geom_point(aes(x=group_2_size, y = true_group_2_weight),shape=17,size=3,color="red")+
facet_wrap(group_1_size~subject)
#Log weight ratio vs. log size_ratio
tb.errors_size_dat=tb.errors_size_dat %>% rowwise() %>% mutate(log_weight_ratio = log(group_1_weight/group_2_weight,base=5),
true_log_weight_ratio = log(size_ratio,base=5))
# log weight ratio
tb.errors_size_dat %>% filter(group_1_size == 4) %>%
group_by(subject,group_1_size,true_log_weight_ratio) %>%
summarise(n = n(), mean_log_weight_ratio = mean(log_weight_ratio), true_log_weight_ratio=mean(true_log_weight_ratio)) %>%
ggplot(aes(x=true_log_weight_ratio, y = mean_log_weight_ratio)) +
geom_point(shape=16,size=3) +
geom_point(aes(x=true_log_weight_ratio, y = true_log_weight_ratio),shape=17,size=3)+
facet_wrap(group_1_size~subject)
#Log weight ratio vs. log size_ratio
tb.errors_size_dat=tb.errors_size_dat %>% rowwise() %>% mutate(log_weight_ratio = log(group_1_weight/group_2_weight),
true_log_weight_ratio = log(size_ratio))
# log weight ratio
tb.errors_size_dat %>% filter(group_1_size == 4) %>%
group_by(subject,group_1_size,true_log_weight_ratio) %>%
summarise(n = n(), mean_log_weight_ratio = mean(log_weight_ratio), true_log_weight_ratio=mean(true_log_weight_ratio)) %>%
ggplot(aes(x=true_log_weight_ratio, y = mean_log_weight_ratio)) +
geom_point(shape=16,size=3) +
geom_point(aes(x=true_log_weight_ratio, y = true_log_weight_ratio),shape=17,size=3)+
facet_wrap(group_1_size~subject)
# Mean performance
tb.errors_size_dat %>% group_by(subject, group_1_size, group_2_size, size_ratio) %>%
summarise(n = n(), group_2_weight = mean(group_2_weight),true_group_2_weight=mean(true_group_2_weight)) %>%
group_by(group_1_size,group_2_size) %>%
summarise(n=n(), mean_group_2_weight = mean(group_2_weight),se_group_2_weight = sd(group_2_weight)/sqrt(n),true_group_2_weight=mean(true_group_2_weight)) %>%
ggplot(aes(x=group_2_size,y=mean_group_2_weight)) +
geom_point(shape=16,size=3) +
geom_line(aes(x=group_2_size,y=mean_group_2_weight,group = 2))+
geom_errorbar(aes(ymin=mean_group_2_weight-se_group_2_weight,ymax=mean_group_2_weight+se_group_2_weight),width=0.15,size=1.2)+
geom_point(aes(x=group_2_size, y = true_group_2_weight),shape=17,size=3,color="red")+
geom_line(aes(x=group_2_size, y = true_group_2_weight,group=2),color="red")+
facet_wrap(.~group_1_size)+
theme_bw()+
theme(axis.text = element_text(size= 16),
text = element_text(size= 16),
panel.grid = element_blank(),
legend.position = 'none')
